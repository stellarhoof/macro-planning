generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:/tmp/vike-prisma/prisma.db"
}

// Entities

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  
  // Required by Prisma, not present in db.
  foods     Food[]
  recipes   Recipe[]
  meals     Meal[]
  plans     Plan[]
}

model Food {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User         @relation(fields: [userId], references: [id])
  userId    Int
  name      String
  brand     String?

  fats      Int
  carbs     Int
  proteins  Int

  // Computed from fats, carbs, and proteins.
  calories  Int

  // Required by Prisma, not present in db.
  recipes   RecipeFood[]

  @@unique([userId, name])
}

model Recipe {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User         @relation(fields: [userId], references: [id])
  userId    Int
  name      String
  steps     String

  // Computed from the list of foods.
  fats      Int
  carbs     Int
  proteins  Int

  // Computed from fats, carbs, and proteins.
  calories  Int

  // Required by Prisma, not present in db.
  foods     RecipeFood[]
  meals     MealRecipe[]

  @@unique([userId, name])
}

model Meal {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User         @relation(fields: [userId], references: [id])
  userId    Int
  name      String

  // Computed from the list of foods.
  fats      Int
  carbs     Int
  proteins  Int

  // Computed from fats, carbs, and proteins.
  calories  Int

  // Required by Prisma, not present in db.
  recipes   MealRecipe[]

  @@unique([userId, name])
}

model Plan {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  name      String

  // Target macro quantities.
  carbs     Int
  fats      Int
  proteins  Int

  @@unique([userId, name])
}

// Relations

model RecipeFood {
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId Int
  food     Food   @relation(fields: [foodId], references: [id])
  foodId   Int
  amount   Int

  @@id([recipeId, foodId])
}

model MealRecipe {
  meal     Meal   @relation(fields: [mealId], references: [id])
  mealId   Int
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId Int

  @@id([mealId, recipeId])
}
