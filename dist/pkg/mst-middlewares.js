import { t as types, r as resolvePath, g as getEnv, o as onSnapshot, a as getSnapshot, b as applySnapshot, c as getRoot, d as addDisposer, e as addMiddleware, f as decorate, h as flow, i as createActionTrackingMiddleware2, j as applyPatch, k as recordPatches, l as isActionContextThisOrChildOf } from './common/mobx-state-tree.module-206958b6.js';
import './common/mobx.esm-137288a3.js';

var atomic = createActionTrackingMiddleware2({
    filter: function (call) {
        // only call the methods above for actions that were not being recorded,
        // but do not call them for child acions (which inherit a copy of the env)
        if (call.env) {
            // already recording
            return false;
        }
        return true;
    },
    onStart: function (call) {
        var recorder = recordPatches(call.tree, function (_patch, _inversePatch, actionContext) {
            // only record patches that were generated by this action or children of this action
            return !!actionContext && isActionContextThisOrChildOf(actionContext, call.id);
        });
        recorder.resume();
        call.env = {
            recorder: recorder
        };
    },
    onFinish: function (call, error) {
        var recorder = call.env.recorder;
        call.env = undefined;
        recorder.stop();
        if (error !== undefined) {
            recorder.undo();
        }
    }
});

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

var TimeTraveller = types
    .model("TimeTraveller", {
    history: types.array(types.frozen()),
    undoIdx: -1,
    targetPath: ""
})
    .views(function (self) { return ({
    get canUndo() {
        return self.undoIdx > 0;
    },
    get canRedo() {
        return self.undoIdx < self.history.length - 1;
    }
}); })
    .actions(function (self) {
    var targetStore;
    var snapshotDisposer;
    var skipNextUndoState = false;
    return {
        addUndoState: function (todos) {
            if (skipNextUndoState) {
                // skip recording if this state was caused by undo / redo
                skipNextUndoState = false;
                return;
            }
            self.history.splice(self.undoIdx + 1);
            self.history.push(todos);
            self.undoIdx = self.history.length - 1;
        },
        afterCreate: function () {
            var _this = this;
            targetStore = self.targetPath
                ? resolvePath(self, self.targetPath)
                : getEnv(self).targetStore;
            if (!targetStore)
                throw new Error("Failed to find target store for TimeTraveller. Please provide `targetPath` property, or a `targetStore` in the environment");
            // TODO: check if targetStore doesn't contain self
            // if (contains(targetStore, self)) throw new Error("TimeTraveller shouldn't be recording itself. Please specify a sibling as taret, not some parent")
            // start listening to changes
            snapshotDisposer = onSnapshot(targetStore, function (snapshot) {
                return _this.addUndoState(snapshot);
            });
            // record an initial state if no known
            if (self.history.length === 0) {
                this.addUndoState(getSnapshot(targetStore));
            }
        },
        beforeDestroy: function () {
            snapshotDisposer();
        },
        undo: function () {
            self.undoIdx--;
            skipNextUndoState = true;
            applySnapshot(targetStore, self.history[self.undoIdx]);
        },
        redo: function () {
            self.undoIdx++;
            skipNextUndoState = true;
            applySnapshot(targetStore, self.history[self.undoIdx]);
        }
    };
});

var Entry = types.model("UndoManagerEntry", {
    patches: types.frozen(),
    inversePatches: types.frozen()
});
var UndoManager = types
    .model("UndoManager", {
    history: types.array(Entry),
    undoIdx: 0
})
    .views(function (self) { return ({
    get undoLevels() {
        return self.undoIdx;
    },
    get redoLevels() {
        return self.history.length - self.undoIdx;
    },
    get canUndo() {
        return this.undoLevels > 0;
    },
    get canRedo() {
        return this.redoLevels > 0;
    }
}); })
    .actions(function (self) {
    var targetStore;
    var recordingDisabled = 0;
    var groupRecorders = [];
    var undoRedoMiddleware = createActionTrackingMiddleware2({
        filter: function (call) {
            if (call.env) {
                // already recording
                return false;
            }
            if (call.context === self) {
                // also skip actions over self
                return false;
            }
            return true;
        },
        onStart: function (call) {
            var recorder = recordPatches(call.tree, function (_patch, _inversePatch, actionContext) {
                if (recordingDisabled) {
                    return false;
                }
                // only record patches that were generated by this action or children of this action
                return (!!actionContext && isActionContextThisOrChildOf(actionContext, call.id));
            });
            recorder.resume();
            call.env = {
                recorder: recorder
            };
        },
        onFinish: function (call, error) {
            var recorder = call.env.recorder;
            call.env = undefined;
            recorder.stop();
            if (error === undefined) {
                if (groupRecorders.length > 0) {
                    var groupRecorder = groupRecorders[groupRecorders.length - 1];
                    groupRecorder.patches = groupRecorder.patches.concat(recorder.patches);
                    groupRecorder.inversePatches = groupRecorder.inversePatches.concat(recorder.inversePatches);
                }
                else {
                    self.addUndoState(recorder);
                }
            }
            else {
                recorder.undo();
            }
        }
    });
    var skipRecording = function (fn) {
        recordingDisabled++;
        try {
            return fn();
        }
        finally {
            recordingDisabled--;
        }
    };
    return {
        addUndoState: function (recorder) {
            this.withoutUndo(function () {
                if (recorder.patches.length === 0) {
                    // skip recording if patches is empty
                    return;
                }
                self.history.splice(self.undoIdx);
                self.history.push({
                    patches: recorder.patches,
                    inversePatches: recorder.inversePatches
                });
                var maxLength = getEnv(self).maxHistoryLength || Infinity;
                self.history.splice(0, self.history.length - maxLength);
                self.undoIdx = self.history.length;
            });
        },
        afterCreate: function () {
            var selfRoot = getRoot(self);
            targetStore = getEnv(self).targetStore || selfRoot;
            if (targetStore === self) {
                throw new Error("UndoManager should be created as part of a tree, or with `targetStore` in it's environment");
            }
            addDisposer(self, addMiddleware(targetStore, undoRedoMiddleware, false));
        },
        undo: decorate(atomic, function () {
            skipRecording(function () {
                if (!self.canUndo) {
                    throw new Error("undo not possible, nothing to undo");
                }
                applyPatch(getRoot(targetStore), 
                // n.b: reverse patches back to forth
                self.history[self.undoIdx - 1].inversePatches.slice().reverse());
                self.undoIdx--;
            });
        }),
        redo: decorate(atomic, function () {
            skipRecording(function () {
                if (!self.canRedo) {
                    throw new Error("redo not possible, nothing to redo");
                }
                applyPatch(getRoot(targetStore), self.history[self.undoIdx].patches);
                self.undoIdx++;
            });
        }),
        withoutUndo: function (fn) {
            return skipRecording(fn);
        },
        withoutUndoFlow: function (generatorFn) {
            return flow(function __withoutUndoFlow__() {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            recordingDisabled++;
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, , 3, 4]);
                            return [5 /*yield**/, __values(generatorFn())];
                        case 2: return [2 /*return*/, _a.sent()];
                        case 3:
                            recordingDisabled--;
                            return [7 /*endfinally*/];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        },
        startGroup: function (fn) {
            if (groupRecorders.length >= 1) {
                throw new Error("a previous startGroup is still running, did you forget to call stopGroup?");
            }
            groupRecorders.push({
                patches: [],
                inversePatches: []
            });
            return fn();
        },
        stopGroup: function () {
            var groupRecorder = groupRecorders.pop();
            if (!groupRecorder) {
                throw new Error("each call to stopGroup requires a previous call to startGroup, did you forget to call startGroup?");
            }
            this.addUndoState(groupRecorder);
        },
        clear: decorate(atomic, function () {
            skipRecording(function () {
                self.history.clear();
                self.undoIdx = 0;
            });
        }),
        clearUndo: decorate(atomic, function () {
            skipRecording(function () {
                self.history.splice(0, self.undoLevels);
                self.undoIdx = 0;
            });
        }),
        clearRedo: decorate(atomic, function () {
            skipRecording(function () {
                self.history.splice(self.undoIdx, self.redoLevels);
            });
        })
    };
});

export { UndoManager };
